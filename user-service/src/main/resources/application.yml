server:
  port: 0 # random port

spring:
  application:
    name: user-service

  rabbitmq:
    host: 127.0.0.1
    port: 5672 # 5672 is AMQP protocol port. 15672 is RabbitMQ UI port
    username: guest # default value
    password: guest # default value

# Migration To Local Config Repository
#  datasource:
#    url: jdbc:h2:tcp://localhost/~/testdb
#    username: sa
#    password:
#    driver-class-name: org.h2.Driver

  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        show_sql: true
        format_sql: true

eureka:
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true  # Eureka 에 등록
    fetch-registry: true        # Eureka에서 주기적으로 최신 정보를 polling 해옴
    service-url:
      defaultZone: http://127.0.0.1:8761/eureka

management:
#  tracing:
#    sampling:
#      probability: 1.0   # 로그 샘플링 비율 - 1.0일 경우에는 100% 로그를 샘플링, default : 0.1
#    propagation:         # 추적 정보 전파 방식 (wbc, b3, b3_multi)
#      produce: b3_multi  # 추적 정보를 여러 개의 헤더로 나누어 전송
#      consume: b3        # HTTP 헤더를 사용하여 추적 ID, 스팬 ID 등을 전달
#
#  zipkin:
#    tracing:
#      endpoint: "http://localhost:9411/api/v2/spans"

  endpoints:
    web:
      exposure:
        include: refresh, health, beans, busrefresh
        # refresh : Config Server에서 가져온 정보를 refresh하기 위함
        # = Config Server에서 정보가 변경되었을때, 이 엔드포인트를 호출하면 MS를 재기동할 필요가 없음
        # 다른 엔드포인트와 다르게 POST 방식으로 요청
        # example >> curl -X POST "localhost:57165/actuator/refresh"


greeting:
  message: Welcome to the Simple E-commerce.

logging:
#  pattern:
#    level: "%5p [%X{traceId:-},%X{spanId:-}]"
  level:
    io.dongvelop.userservice.client: DEBUG

token:
  expiration_time: 86400000
  secret: user_token